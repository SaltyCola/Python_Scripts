# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 10
ball_pos = [WIDTH/2, HEIGHT/2]
ball_vel = [0, 0]
PAD_WIDTH = 8
PAD_HEIGHT = 50
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
paddle1_pos = (HEIGHT/2 - PAD_HEIGHT/2)
paddle2_pos = (HEIGHT/2 - PAD_HEIGHT/2)
paddle1_vel = 0
paddle2_vel = 0
LEFT = False
RIGHT = True
init_dir = 0
score1 = 0
score2 = 0
str_win = ""
Cont = True

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    global init_dir
    
    #initialize ball
    ball_pos = [WIDTH/2, HEIGHT/2]
    ball_vel = [0, 0]
    
    #generate velocity values
    if direction == RIGHT:
        init_dir = 1
    elif direction == LEFT:
        init_dir = 2
        
    #delay for one second
    if Cont:
        timer.start()
    

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    global str_win, Cont
    
    #reset win message
    str_win = ""
    Cont = True
    
    #reset scores
    score1 = 0
    score2 = 0
    
    #start the ball
    spawn_ball(RIGHT)

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel, ball_pos, ball_vel
 
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
            
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 2, "White", "White")
    
    # update paddle's vertical position, keep paddle on the screen
    #paddle1
    paddle1_pos += paddle1_vel
    if paddle1_pos <= 0:
        paddle1_pos = 1
    elif (paddle1_pos + PAD_HEIGHT) >= HEIGHT:
        paddle1_pos = HEIGHT - PAD_HEIGHT - 1
    #paddle2
    paddle2_pos += paddle2_vel
    if paddle2_pos <= 0:
        paddle2_pos = 1
    elif (paddle2_pos + PAD_HEIGHT) >= HEIGHT:
        paddle2_pos = HEIGHT - PAD_HEIGHT - 1
    
    # draw paddles
    canvas.draw_polygon([(0, paddle1_pos), (PAD_WIDTH, paddle1_pos), (PAD_WIDTH, (paddle1_pos + PAD_HEIGHT)), (0, (paddle1_pos + PAD_HEIGHT))], 1, 'White', 'White')
    canvas.draw_polygon([(WIDTH, paddle2_pos), ((WIDTH - PAD_WIDTH), paddle2_pos), ((WIDTH - PAD_WIDTH), (paddle2_pos + PAD_HEIGHT)), (WIDTH, (paddle2_pos + PAD_HEIGHT))], 1, 'White', 'White')
    
    # ball and top/bottom edge collision
    if ball_pos[1] >= HEIGHT - BALL_RADIUS:
        ball_vel[1] = -ball_vel[1]
    elif ball_pos[1] <= BALL_RADIUS:
        ball_vel[1] = -ball_vel[1]
    
    # ball and paddle/gutter collision
    if ball_pos[0] >= WIDTH - PAD_WIDTH - BALL_RADIUS:
        #paddle2
        if (paddle2_pos <= ball_pos[1] <= (paddle2_pos + PAD_HEIGHT)):
            ball_vel[0] = -(ball_vel[0] * 1.1)
        #gutter right
        else:
            score1 += 1
            if score1 == 5:
                EndGame()
            elif score1 < 5:
                spawn_ball(LEFT)
            
    elif ball_pos[0] <= PAD_WIDTH + BALL_RADIUS:
        #paddle1
        if (paddle1_pos <= ball_pos[1] <= (paddle1_pos + PAD_HEIGHT)):
            ball_vel[0] = -(ball_vel[0] * 1.1)
        #gutter left
        else:
            score2 += 1
            if score2 == 5:
                EndGame()
            elif score2 < 5:
                spawn_ball(RIGHT)
    
    # draw scores
    canvas.draw_text(str(score1), [(WIDTH/2 - (135 + frame.get_canvas_textwidth("0", 50))), 55], 50, "White")
    canvas.draw_text(str(score2), [(WIDTH/2 + 135), 55], 50, "White")
    
    #draw winner message
    canvas.draw_text(str_win, [WIDTH/2 - (frame.get_canvas_textwidth(str_win, 50))/2, HEIGHT/3], 50, "White")
    
def keydown(key):
    global paddle1_vel, paddle2_vel
    
    #paddle1
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel -= 5
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel += 5
        
    #paddle2
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel -= 5
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel += 5
   
def keyup(key):
    global paddle1_vel, paddle2_vel
    
    #paddle1
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel += 5
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel -= 5
        
    #paddle2
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel += 5
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel -= 5
    
def timer_handler():
    global ball_vel
    
    #start ball velocity
    if init_dir == 1:
        ball_vel[0] = (random.randrange(240, 300) / 60)
        ball_vel[1] = - (random.randrange(120, 300) / 60)
    elif init_dir == 2:
        ball_vel[0] = - (random.randrange(240, 300) / 60)
        ball_vel[1] = - (random.randrange(120, 300) / 60)
    
    #stop timer
    timer.stop()
    
def NewGameButton_Handler():
    new_game()
    
def EndGame():
    global str_win, Cont, ball_pos, ball_vel
    
    #initialize ball
    ball_pos = [WIDTH/2, HEIGHT/2]
    ball_vel = [0, 0]
    
    #win message
    if score1 == 5:
        str_win = "Player 1 Wins!"
        Cont = False
    elif score2 == 5:
        str_win = "Player 2 Wins!"
        Cont = False

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
NewGameButton = frame.add_button("New Game", NewGameButton_Handler)
timer = simplegui.create_timer(1000, timer_handler)

# start frame
frame.start()
